[{"/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/index.js":"1","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/App.js":"2","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/components/TextEditor.jsx":"3","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/pages/Lobby.jsx":"4","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/pages/CodeBlock.jsx":"5","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/components/Mode.jsx":"6"},{"size":254,"mtime":1683877026357,"results":"7","hashOfConfig":"8"},{"size":502,"mtime":1683883964169,"results":"9","hashOfConfig":"8"},{"size":4565,"mtime":1684004495616,"results":"10","hashOfConfig":"8"},{"size":1416,"mtime":1684000950684,"results":"11","hashOfConfig":"8"},{"size":447,"mtime":1683927854739,"results":"12","hashOfConfig":"8"},{"size":254,"mtime":1683929084460,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1p9mut7",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/index.js",[],[],[],"/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/App.js",["36"],[],"import \"./App.css\";\nimport TextEditor from \"./components/TextEditor\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Lobby from \"./pages/Lobby\";\nimport CodeBlock from \"./pages/CodeBlock\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Lobby />}></Route>\n      </Routes>\n      <Routes>\n        <Route path=\"/codeBlocks/:blockId\" element={<CodeBlock />}></Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/components/TextEditor.jsx",["37","38","39","40","41"],[],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"quill/dist/quill.snow.css\";\nimport Quill from \"quill\";\nimport { io } from \"socket.io-client\";\nimport { useParams } from \"react-router-dom\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport \"../App.css\";\nimport \"../styles/TextEditor.css\";\nimport Mode from \"./Mode\";\n\nfunction TextEditor() {\n  const { blockId } = useParams();\n  const [socket, setSocket] = useState();\n  const [quill, setQuill] = useState();\n\n  const [blockTitle, setBlockTitle] = useState(\"\");\n  const [isFirst, setIsfirst] = useState(true);\n  const [text, setText] = useState(\"\");\n\n  const [showSmiley, setShowSmiley] = useState(false);\n  const [rightCode, setRightCode] = useState(\"\");\n\n  // Configure server connection.\n  useEffect(() => {\n    const s = io(\"http://localhost:3001\");\n    setSocket(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n\n  // Configure text-editor.\n  const wrapperRef = useCallback((wrapper) => {\n    if (wrapper == null) return;\n\n    // Makes sure that editor appears only once each rendering.\n    wrapper.innerHTML = \"\";\n    const editor = document.createElement(\"div\");\n    wrapper.append(editor);\n\n    const q = new Quill(editor, {\n      theme: \"snow\",\n      modules: {\n        toolbar: false,\n      },\n      formats: [],\n    });\n    // Editor is disabled untill initial block will load.\n    q.disable();\n    q.setText(\"loading...\");\n    setQuill(q);\n    setText(q.getText());\n  }, []);\n\n  // Handle self text change.\n  useEffect(() => {\n    if (socket == null || quill == null) return;\n\n    const handler = (delta, oldDelta, source) => {\n      // Emit an event only for others text changes.\n      if (source !== \"user\") return;\n      // Send only the spcific text changes, not all doc.\n      socket.emit(\"send-changes\", delta);\n      setText(quill.getText());\n    };\n\n    // \"text-change\" is quill built-in event\n    quill.on(\"text-change\", handler);\n    return () => {\n      quill.off(\"text-change\", handler);\n    };\n  }, [socket, quill]);\n\n  // Handle receiving text change.\n  useEffect(() => {\n    if (socket == null || quill == null) return;\n\n    const handler = (delta) => {\n      quill.updateContents(delta);\n      setText(quill.getText());\n    };\n\n    // \"text-change\" is quill built-in event\n    socket.on(\"receive-changes\", handler);\n    return () => {\n      socket.off(\"receive-changes\", handler);\n    };\n  }, [socket, quill]);\n\n  useEffect(() => {\n    if (\n      text.replace(/\\s+/g, \" \").trim() === rightCode.replace(/\\s+/g, \" \").trim()\n    ) {\n      setShowSmiley(true);\n    } else {\n      setShowSmiley(false);\n    }\n  }, [text]);\n\n  // Init code block.\n  useEffect(() => {\n    if (socket == null || quill == null) return;\n\n    socket.once(\"load-block\", async (block, userCount) => {\n      quill.setText(block.code);\n      setText(quill.getText());\n      quill.enable();\n      setBlockTitle(block.title);\n      setRightCode(block.rightCode);\n      console.log(\"rightCode\", rightCode);\n      setIsfirst(userCount === 1);\n    });\n    socket.emit(\"get-block\", blockId);\n  }, [socket, quill, blockId]);\n\n  // Determine whether mentor or student\n  useEffect(() => {\n    if (socket == null) return;\n    socket.emit(\"is-first\");\n    console.log(\"is first from clie nt\");\n  }, [socket]);\n\n  useEffect(() => {\n    if (socket == null || quill == null) return;\n\n    socket.emit(\"save-block\", quill.getContents());\n    console.log(\"from client: save the changes!\");\n  }, [socket, quill]);\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.emit(\"register-user\", socket.id);\n    return () => {\n      socket.emit(\"unregister-user\", socket.id);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (quill == null) return;\n    console.log(\"is first?\", isFirst);\n  }, [isFirst]);\n\n  const updateCode = () => {\n    if (quill == null || socket == null) return;\n    socket.emit(\"save-block\", quill.getContents().ops[0].insert);\n  };\n\n  return (\n    <div className=\"container-block\">\n      <div className=\"editor-div\">\n        <Mode isFirst={isFirst} />\n        <h2>{blockTitle}</h2>\n        <div\n          className={isFirst ? \"disp-none\" : null}\n          id=\"container\"\n          ref={wrapperRef}\n        ></div>\n      </div>\n      <button onClick={() => updateCode()}>save code</button>\n      {showSmiley && <h1>:)</h1>}\n      <SyntaxHighlighter language=\"javascript\" style={dark} tabSize={2}>\n        {text}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n\nexport default TextEditor;\n","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/pages/Lobby.jsx",[],[],"/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/pages/CodeBlock.jsx",["42"],[],"import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport TextEditor from \"../components/TextEditor\";\n\nfunction CodeBlock() {\n  const { blockId } = useParams();\n  const navigate = useNavigate();\n\n  return (\n    <div>\n      <div>\n        <TextEditor />\n      </div>\n      <button onClick={() => navigate(\"/\")}>Back to Lobby</button>\n    </div>\n  );\n}\n\nexport default CodeBlock;\n","/Users/sagyblecher/Desktop/sb/moveo_coding_app/client/src/components/Mode.jsx",[],[],{"ruleId":"43","severity":1,"message":"44","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":18},{"ruleId":"43","severity":1,"message":"47","line":1,"column":41,"nodeType":"45","messageId":"46","endLine":1,"endColumn":47},{"ruleId":"48","severity":1,"message":"49","line":100,"column":6,"nodeType":"50","endLine":100,"endColumn":12,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"49","line":116,"column":6,"nodeType":"50","endLine":116,"endColumn":30,"suggestions":"52"},{"ruleId":"48","severity":1,"message":"53","line":138,"column":6,"nodeType":"50","endLine":138,"endColumn":8,"suggestions":"54"},{"ruleId":"48","severity":1,"message":"55","line":143,"column":6,"nodeType":"50","endLine":143,"endColumn":15,"suggestions":"56"},{"ruleId":"43","severity":1,"message":"57","line":7,"column":11,"nodeType":"45","messageId":"46","endLine":7,"endColumn":18},"no-unused-vars","'TextEditor' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rightCode'. Either include it or remove the dependency array.","ArrayExpression",["58"],["59"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["60"],"React Hook useEffect has a missing dependency: 'quill'. Either include it or remove the dependency array.",["61"],"'blockId' is assigned a value but never used.",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [rightCode, text]",{"range":"70","text":"71"},"Update the dependencies array to be: [socket, quill, blockId, rightCode]",{"range":"72","text":"73"},"Update the dependencies array to be: [socket]",{"range":"74","text":"75"},"Update the dependencies array to be: [isFirst, quill]",{"range":"76","text":"77"},[2717,2723],"[rightCode, text]",[3167,3191],"[socket, quill, blockId, rightCode]",[3750,3752],"[socket]",[3851,3860],"[isFirst, quill]"]